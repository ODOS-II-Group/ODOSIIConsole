#!groovy
def GIT_URL=scm.getUserRemoteConfigs()[0].getUrl();

def runGitMergeFromBranch(git_branch, git_base_branch, git_repo_url){
   checkout changelog: false, poll: false, scm: [
       $class: 'GitSCM',
       branches: [[name: git_base_branch]],
       doGenerateSubmoduleConfigurations: false,
       extensions: [[
           $class: 'PreBuildMerge',
           options: [fastForwardMode: 'FF', mergeRemote: 'origin', mergeStrategy: 'recursive', mergeTarget: git_branch]
       ]],
       submoduleCfg: [],
       userRemoteConfigs: [[credentialsId: 'jenkins-ssh', url: git_repo_url]]
   ]
   println "Locally merged $git_base_branch to $git_branch"
}

def slack(msg){
  echo msg
  slackSend botUser: true, message: "${JOB_NAME}#${BUILD_ID}: ${msg}", tokenCredentialId: 'slack'

}

def twistlock(repo,image,tag){
  twistlockScan(
    ca: '',
    cert: '',
    compliancePolicy: 'high',
    dockerAddress: 'unix:///var/run/docker.sock',
    gracePeriodDays: 0,
    ignoreImageBuildTime: false,
    repository: repo,
    image: "${image}:${tag}",
    tag: tag,
    key: '',
    logLevel: 'true',
    policy: 'high',
    requirePackageUpdate: true,
    timeout: 10
  )

  twistlockPublish(
    ca: '',
    cert: '',
    dockerAddress: 'unix:///var/run/docker.sock',
    image: "${repo}/${image}:${tag}",
    key: '',
    logLevel: 'true',
    timeout: 10
  )
}


pipeline {
    agent any

    stages {
        stage('init'){
          steps{
            runGitMergeFromBranch('Staging', 'master', GIT_URL)

            slack "Build Started."
          }
        }
        stage('Build') {
            steps {
                slack 'Building...'
                dir('ODOS-II-svc3') {
                  sh './gradlew bootRepackage -Pprod'
                }
            }
        }
        stage('Sonar') {
          steps {
            slack 'Sonar Scan and Upload...'
            dir('ODOS-II-svc3') {
              sh './gradlew sonarqube'
            }
          }
        }
        stage('Fortify Scan') {
            steps {
                slack 'Fortify Scan...'
            }
        }
        stage('Containerize') {
            steps {
                slack 'Packaging into a container...'
                dir('ODOS-II-svc3') {
                  withCredentials([usernamePassword(credentialsId: 'odos-password', passwordVariable: 'ODOS_PW', usernameVariable: 'ODOS_USER')]) {
                      sh """
                        docker login -u ${ODOS_USER} -p ${ODOS_PW} docker.lassiterdynamics.com:5000
                        ./gradlew buildDocker
                      """
                  }
                }
            }
        }
        stage('Twistlock Scan') {
            steps {
                slack 'Twistlock Scan...'
                twistlock('docker.lassiterdynamics.com:5000', 'odosiisvc3','latest')
            }
        }
        stage('Push') {
            steps {
              script{
                slack 'Push to Docker Registry..'
                sh "docker push docker.lassiterdynamics.com:5000:odosiisvc3:${BUILD_ID}"
                sh 'docker push docker.lassiterdynamics.com:5000:odosiisvc3:latest'
              }
            }
        }
        stage('Test Deploy') {
            steps {
                slack 'Deploying to Test Environment...'
            }
        }
        stage('FT') {
            steps {
                slack 'Functional Testing...'
            }
        }
        stage('PT') {
            steps {
                slack 'Performance Testing...'
            }
        }
        stage('Merge') {
            steps {
                slack 'Merge to master branch...'
            }
        }
        stage('PP Deploy') {
            steps {
                slack 'Deploying to PreProd Environment...'
            }
        }

    }
}
