#!groovy
def GIT_URL=scm.getUserRemoteConfigs()[0].getUrl();

def runGitMergeFromBranch(git_branch, git_base_branch, git_repo_url){
   checkout changelog: false, poll: false, scm: [
       $class: 'GitSCM',
       branches: [[name: git_base_branch]],
       doGenerateSubmoduleConfigurations: false,
       extensions: [[
           $class: 'PreBuildMerge',
           options: [fastForwardMode: 'FF', mergeRemote: 'origin', mergeStrategy: 'recursive', mergeTarget: git_branch]
       ]],
       submoduleCfg: [],
       userRemoteConfigs: [[credentialsId: '00cff298-5812-4a93-8e67-18fa11e36670', url: git_repo_url]]
   ]
   println "Locally merged $git_base_branch to $git_branch"
}


pipeline {
    agent any

    stages {
        stage('init'){
          steps{
            runGitMergeFromBranch('Staging', 'master', GIT_URL)

            slackSend botUser: true, channel: '#general', message: "${JOB_NAME}: Build ${BUILD_ID} Started.", tokenCredentialId: 'slack'
          }
        }
        stage('Build') {
            steps {
                echo 'Building...'
                sh './gradlew bootRepackage -Pprod'
            }
        }
        stage('Sonar') {
          steps {
            echo 'Sonar Scan and Upload...'
            sh './gradlew sonarqube'
          }
        }
        stage('Fortify Scan') {
            steps {
                echo 'Fortify Scan...'
            }
        }
        stage('Containerization') {
            steps {
                echo 'Packaging into a container...'
                sh './gradlew dockerBuild'
            }
        }
        stage('Twistlock Scan') {
            steps {
                echo 'Twistlock Scan...'
            }
        }
        stage('Test Deploy') {
            steps {
                echo 'Deploying to Test Environment...'
            }
        }
        stage('FT') {
            steps {
                echo 'Functional Testing...'
            }
        }
        stage('PT') {
            steps {
                echo 'Performance Testing...'
            }
        }
        stage('Push') {
            steps {
                echo 'Push to Docker Registry..'
            }
        }
        stage('PP Deploy') {
            steps {
                echo 'Deploying to PreProd Environment...'
            }
        }

    }
}
